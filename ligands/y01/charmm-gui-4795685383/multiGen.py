#!/usr/bin/env python
import sys,os
import argparse
import textwrap

import yaml

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-option', dest="option")
    parser.add_argument('-chains', nargs='*', dest="chains")
    parser.add_argument('-orig', dest="orig")
    parser.add_argument('-resn', dest="resn")

    inputarg = parser.parse_args()
    option     = inputarg.option
    chains   = inputarg.chains
    orig     = inputarg.orig
    resn     = inputarg.resn

    # READ ligand information and Mapping

    with open("ligandrm.yml",'r') as stream:
        rm_info = yaml.load(stream, Loader=yaml.FullLoader)

    rm_info["newresn"] = resn.upper()

    orgpdb = rm_info['orgfile'].split(".")[0]+".pdb"

    mapping = {}
    mappingcnt = []

    uploadDic = {}
    origDic = {}

    crdAtomLine = "%10i%10i  %-10s%-8s%20.10f%20.10f%20.10f  %-10s%-8s%20.10f\n"

    cnt = 0
    for line in open("upload.crd",'r'):
        if '0.0000000000' in line:
            line = line.strip().split()
            atomn = line[3]
            coorx = float(line[4])
            coory = float(line[5])
            coorz = float(line[6])
            uploadDic[cnt] = { "atomn" : atomn,
                                 "coorx" : "%.2f" % coorx,
                                 "coory" : "%.2f" % coory,
                                 "coorz" : "%.2f" % coorz }
            mappingcnt.append(atomn)
            cnt += 1

    cnt = 0
    for line in open(orgpdb,'r'):
        if line.startswith("ATOM"):
            atomn = line[11:16].strip()
            coorx = float(line[30:38])
            coory = float(line[38:46])
            coorz = float(line[46:54])
            origDic[cnt] = { "atomn" : atomn,
                             "coorx" : "%.2f" % coorx,
                             "coory" : "%.2f" % coory,
                             "coorz" : "%.2f" % coorz }
            cnt += 1
    for i in range(0,len(uploadDic)):
        for j in range(0,len(origDic)):
            if (uploadDic[i]["coorx"] == origDic[j]["coorx"]) and (uploadDic[i]["coory"] == origDic[j]["coory"]) and (uploadDic[i]["coorz"] == origDic[j]["coorz"]):
                mapping[uploadDic[i]["atomn"]] = origDic[j]["atomn"]

    #check multiple ligands

    multilig = []

    if ( option == "LoadPDBID" or option == "UploadPDB" ):
        orig_file   = orig.split(".")[0]
        orig_parser = orig.split(".")[0].split("_")
        modi_chain = orig_parser[-1]
        pdbid       = orig_file.split(modi_chain)[0]
        pdbid       = pdbid[:-1]

        for i in range(0,len(chains)):
            fname = "%s_%s.pdb" % (pdbid,chains[i])
            crdcnt = 1

            switch = True
            if (chains[i] != modi_chain):   # if this chain is not modified chain
                temppdb = {}
                fin = open(fname, 'r')
                for line in fin:
                    if switch and line.startswith("ATOM"):
                        tempresn = line[17:20].strip()
                        if tempresn == rm_info["orgresn"]: # if this chain has the same resn
                            multilig.append(fname.split(".")[0])
                            switch = False

        for fname in multilig:
            foutcrd = open(fname+".crd",'w')
            fopen = open(fname+".pdb", 'r')
            cnt = 1
            crdstr = ""
            for line in fopen:
                if line.startswith("ATOM"):
                    atomn  = line[11:16].strip()
                    resseq = int(line[22:26])
                    coorx  = float(line[30:38])
                    coory  = float(line[38:46])
                    coorz  = float(line[46:54])
                    seqn   = line[72:76].strip()
                    temppdb[atomn] = {"resseq" : resseq,
                                      "coorx"  : coorx,
                                      "coory"  : coory,
                                      "coorz"  : coorz,
                                      "seqn"   : seqn  }

                    for dumpn, dumpatmn in mapping.iteritems():
                        if dumpatmn == atomn:
                            crdstr += crdAtomLine % (cnt,1, rm_info["newresn"], dumpn, coorx, coory, coorz, rm_info["newresn"],1,0)
                    cnt+=1
            foutcrd.write("* GENERATED BY CHARMM-GUI (HTTP://WWW.CHARMM-GUI.ORG)\n*\n")
            foutcrd.write("%10i  EXT\n" % (cnt - 1))
            foutcrd.write(crdstr)

        if len(multilig) > 0:
            yaml.dump(multilig,open('multilig.yml','w'), default_flow_style=None)

    elif (option == "combinatorial"):
        orig_file   = orig.split(".")[0]
        orig_parser = orig.split(".")[0].split("_")
        modi_chain = orig_parser[-1]
        pdbid       = orig_file.split(modi_chain)[0]
        pdbid       = pdbid[:-1]

        dircnt = int(1)

        while(os.path.exists("ld%s" % dircnt)):

            for i in range(0,len(chains)):
                fname = "%s_%s.pdb" % (pdbid,chains[i])
                crdcnt = 1
                switch = True
                if (chains[i] != modi_chain):  # if this chain is not modified chain
                    temppdb = {}
                    fin = open(fname, 'r')
                    for line in fin:
                        if (dircnt == 1) and switch and line.startswith("ATOM"):
                            tempresn = line[17:20].strip()
                            if tempresn == rm_info["orgresn"]: # if this chain has the same resn
                                multilig.append(fname.split(".")[0])
                                switch = False

            for fname in multilig:
                foutcrd = open("ld%s/" % dircnt+fname+".crd",'w')
                fopen = open(fname+".pdb", 'r')
                cnt = 1
                crdstr = ""
                for line in fopen:
                    if line.startswith("ATOM"):
                        atomn  = line[11:16].strip()
                        resseq = int(line[22:26])
                        coorx  = float(line[30:38])
                        coory  = float(line[38:46])
                        coorz  = float(line[46:54])
                        seqn   = line[72:76].strip()
                        temppdb[atomn] = {"resseq" : resseq,
                                          "coorx"  : coorx,
                                          "coory"  : coory,
                                          "coorz"  : coorz,
                                          "seqn"   : seqn  }

                        for dumpn, dumpatmn in mapping.iteritems():
                            if dumpatmn == atomn:
                                crdstr += crdAtomLine % (cnt,1, rm_info["newresn"], dumpn, coorx, coory, coorz, rm_info["newresn"],1,0)
                        cnt+=1
                foutcrd.write("* GENERATED BY CHARMM-GUI (HTTP://WWW.CHARMM-GUI.ORG)\n*\n")
                foutcrd.write("%10i  EXT\n" % (cnt - 1))
                foutcrd.write(crdstr)

            dircnt += 1

        if len(multilig) > 0:
            yaml.dump(multilig,open('multilig.yml','w'), default_flow_style=None)
